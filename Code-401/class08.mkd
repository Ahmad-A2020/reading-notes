### SOLID principles intro
- SOLID is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin as follows:
- S : Single-responsiblity Principle

A class should have one and only one reason to change, meaning that a class should have only one job
- O : Open-closed Principle- Objects or entities should be open for extension but closed for modification

- L : Liskov Substitution Principle: Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T

- I : Interface Segregation Principle: A client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use.

- D : Dependency Inversion Principle: Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.

### OO SOLID principles in real life:
- s is for single responsibility principle: class or module should do one thing onlycd
- o is for open/closed principle:ode entities should be open for extension, but closed for modification.
- l is for liskov substitution principle:   any child type of a parent type should be able to stand in for that parent without things blowing up.
- i is for interface segregation principle:
- d is for dependency inversion
- dependency inversion principle (dip) encourages you to write code that depends upon abstractions rather than upon concrete details.
